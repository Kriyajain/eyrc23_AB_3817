
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
000001c2 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
000001c2  w      .debug_info	00000000 .hidden t1b_path_planner.c.0240d200
00000000 g       *ABS*	00000000 __bss_size
00000464 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
0000045c g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000004a4 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000488 g     F .text	0000001c memset
00000054 g     F .text	00000408 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000004a8 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    4a800593          	addi	x11,x0,1192
  1c:	    00000613          	addi	x12,x0,0
  20:	    444000ef          	jal	x1,464 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    454000ef          	jal	x1,488 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    41c000ef          	jal	x1,45c <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###         _put_byte('\n');
     ### 
     ### */
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	             ee010113          	addi	x2,x2,-288
     ###     uint8_t idx = 0;
     ### 
     ###     // ############# Add your code here #############
     ### // uint16_t *map = (uint16_t*) 0x02000010;
     ### uint16_t map[68];
     ### map[ 0 ] = 11 ;                //1 = 0 + 1 
  58:	             00b00793          	addi	x15,x0,11
  5c:	             08f11423          	sh	x15,136(x2)
     ### map[ 1 ] = 301 ;               //1 = 1 + 0
  60:	             12d00793          	addi	x15,x0,301
  64:	             08f11523          	sh	x15,138(x2)
     ### map[ 2 ] = 321 ;               //3 = 1 + 2
  68:	             14100793          	addi	x15,x0,321
  6c:	             08f11623          	sh	x15,140(x2)
     ### map[ 3 ] = 591 ;               //30 = 1 + 29
  70:	             24f00793          	addi	x15,x0,591
  74:	             08f11723          	sh	x15,142(x2)
     ### map[ 4 ] = 611 ;               //3=2+1
  78:	             26300793          	addi	x15,x0,611
  7c:	             08f11823          	sh	x15,144(x2)
     ### map[ 5 ] = 632 ;               //5=2+3
  80:	             27800793          	addi	x15,x0,632
  84:	             08f11923          	sh	x15,146(x2)
     ### map[ 6 ] = 683 ;               //10 = 2+8
  88:	             2ab00793          	addi	x15,x0,683
  8c:	             08f11a23          	sh	x15,148(x2)
     ### map[ 7 ] = 922 ;               //5 = 3+2
  90:	             39a00793          	addi	x15,x0,922
  94:	             08f11b23          	sh	x15,150(x2)
     ### map[ 8 ] = 943 ;               //7 = 3+4
  98:	             3af00793          	addi	x15,x0,943
  9c:	             08f11c23          	sh	x15,152(x2)
     ### map[ 9 ] = 1186 ;              //31 = 3+28
  a0:	             4a200793          	addi	x15,x0,1186
  a4:	             08f11d23          	sh	x15,154(x2)
     ### map[ 10 ] = 1233 ;             //7 = 4+3
  a8:	             4d100793          	addi	x15,x0,1233
  ac:	             08f11e23          	sh	x15,156(x2)
     ### map[ 11 ] = 1251 ;             //9 = 4+5
  b0:	             4e300793          	addi	x15,x0,1251
  b4:	             08f11f23          	sh	x15,158(x2)
     ### map[ 12 ] = 1264 ;             //10 = 4+6
  b8:	             4f000793          	addi	x15,x0,1264
  bc:	             0af11023          	sh	x15,160(x2)
     ### map[ 13 ] = 1541 ;             //9 = 5+4
  c0:	             60500793          	addi	x15,x0,1541
  c4:	             0af11123          	sh	x15,162(x2)
     ### map[ 14 ] = 1844 ;             //10 6+4
  c8:	             73400793          	addi	x15,x0,1844
  cc:	             0af11223          	sh	x15,164(x2)
     ### map[ 15 ] = 1874 ;             //13 6+7
  d0:	             75200793          	addi	x15,x0,1874
  d4:	             0af11323          	sh	x15,166(x2)
     ### map[ 16 ] = 2164 ;             //13 = 7+6
  d8:	             000017b7          	lui	x15,0x1
  dc:	             87478713          	addi	x14,x15,-1932 # 874 <__flash_size+0x74>
  e0:	             0ae11423          	sh	x14,168(x2)
     ### map[ 17 ] = 2181 ;             // 15 = 7+8
  e4:	             88578713          	addi	x14,x15,-1915
  e8:	             0ae11523          	sh	x14,170(x2)
     ### map[ 18 ] = 2423 ;             //10 = 8+2 
  ec:	             97778713          	addi	x14,x15,-1673
  f0:	             0ae11623          	sh	x14,172(x2)
     ### map[ 19 ] = 2471 ;             //15 = 8+7
  f4:	             9a778713          	addi	x14,x15,-1625
  f8:	             0ae11723          	sh	x14,174(x2)
     ### map[ 20 ] = 2491 ;              //17 = 8+9
  fc:	             9bb78713          	addi	x14,x15,-1605
 100:	             0ae11823          	sh	x14,176(x2)
     ### map[ 21 ] = 2523 ;              //20= 8+ 12
 104:	             9db78713          	addi	x14,x15,-1573
 108:	             0ae11923          	sh	x14,178(x2)
     ### map[ 22 ] = 2781 ;              //17= 9+8
 10c:	             add78713          	addi	x14,x15,-1315
 110:	             0ae11a23          	sh	x14,180(x2)
     ### map[ 23 ] = 2801 ;              //19 = 9+10
 114:	             af178713          	addi	x14,x15,-1295
 118:	             0ae11b23          	sh	x14,182(x2)
     ### map[ 24 ] = 2811 ;              //20 = 9+11
 11c:	             afb78713          	addi	x14,x15,-1285
 120:	             0ae11c23          	sh	x14,184(x2)
     ### map[ 25 ] = 3091 ;              //19 = 10 + 9
 124:	             c1378713          	addi	x14,x15,-1005
 128:	             0ae11d23          	sh	x14,186(x2)
     ### map[ 26 ] = 3391 ;              //20 = 11 + 9
 12c:	             d3f78713          	addi	x14,x15,-705
 130:	             0ae11e23          	sh	x14,188(x2)
     ### map[ 27 ] = 3683 ;              //20 = 12 + 8
 134:	             e6378713          	addi	x14,x15,-413
 138:	             0ae11f23          	sh	x14,190(x2)
     ### map[ 28 ] = 3736 ;              // 25 = 12+13
 13c:	             e9878713          	addi	x14,x15,-360
 140:	             0ce11023          	sh	x14,192(x2)
     ### map[ 29 ] = 3796 ;              //31 = 12+19
 144:	             ed478713          	addi	x14,x15,-300
     ### int main(int argc, char const *argv[]) {
 148:	             10112e23          	sw	x1,284(x2)
 14c:	             10812c23          	sw	x8,280(x2)
     ### map[ 29 ] = 3796 ;              //31 = 12+19
 150:	             0ce11123          	sh	x14,194(x2)
     ### map[ 30 ] = 4026 ;              //25 = 13+12
 154:	             fba78713          	addi	x14,x15,-70
 158:	             0ce11223          	sh	x14,196(x2)
     ### map[ 31 ] = 4045 ;              //27 = 13 + 14
 15c:	             fcd78713          	addi	x14,x15,-51
 160:	             0ce11323          	sh	x14,198(x2)
     ### map[ 32 ] = 4335 ;              //27 = 14+ 13
 164:	             0ef78713          	addi	x14,x15,239
 168:	             0ce11423          	sh	x14,200(x2)
     ### map[ 33 ] = 4351 ;              //29 = 14+15
 16c:	             0ff78713          	addi	x14,x15,255
 170:	             0ce11523          	sh	x14,202(x2)
     ### map[ 34 ] = 4364 ;              //30 = 14+16
 174:	             10c78713          	addi	x14,x15,268
 178:	             0ce11623          	sh	x14,204(x2)
     ### map[ 35 ] = 4641 ;              //29 = 15+14
 17c:	             22178713          	addi	x14,x15,545
 180:	             0ce11723          	sh	x14,206(x2)
     ### map[ 36 ] = 4944 ;              //30 = 16+14
 184:	             35078713          	addi	x14,x15,848
 188:	             0ce11823          	sh	x14,208(x2)
     ### map[ 37 ] = 4971 ;              //33 = 16+17
 18c:	             36b78713          	addi	x14,x15,875
 190:	             0ce11923          	sh	x14,210(x2)
     ### map[ 38 ] = 4985 ;              //34 = 16+18 
 194:	             37978713          	addi	x14,x15,889
 198:	             0ce11a23          	sh	x14,212(x2)
     ### map[ 39 ] = 5261 ;              //33 = 17+16
 19c:	             48d78713          	addi	x14,x15,1165
 1a0:	             0ce11b23          	sh	x14,214(x2)
     ### map[ 40 ] = 5565 ;              //34 = 18+16
 1a4:	             5bd78713          	addi	x14,x15,1469
 1a8:	             0ce11c23          	sh	x14,216(x2)
     ### map[ 41 ] = 5596 ;              //37 = 18 +19
 1ac:	             5dc78713          	addi	x14,x15,1500
 1b0:	             0ce11d23          	sh	x14,218(x2)
     ### map[ 42 ] = 5826 ;              //37 = 19+12
 1b4:	             6c278713          	addi	x14,x15,1730
 1b8:	             0ce11e23          	sh	x14,220(x2)
     ### map[ 43 ] = 5886 ;              //31 = 19+18
 1bc:	             6fe78713          	addi	x14,x15,1790
     ### map[ 44 ] = 5903 ;              //19+20
 1c0:	             70f78793          	addi	x15,x15,1807
 1c4:	             0ef11023          	sh	x15,224(x2)
     ### map[ 45 ] = 6193 ;              //39 = 20+19
 1c8:	             000027b7          	lui	x15,0x2
     ### map[ 43 ] = 5886 ;              //31 = 19+18
 1cc:	             0ce11f23          	sh	x14,222(x2)
     ### map[ 45 ] = 6193 ;              //39 = 20+19
 1d0:	             83178713          	addi	x14,x15,-1999 # 1831 <__flash_size+0x1031>
 1d4:	             0ee11123          	sh	x14,226(x2)
     ### map[ 46 ] = 6211 ;              //39= 20+21
 1d8:	             84378713          	addi	x14,x15,-1981
 1dc:	             0ee11223          	sh	x14,228(x2)
     ### map[ 47 ] = 6241 ;              //41 = 20+24
 1e0:	             86178713          	addi	x14,x15,-1951
 1e4:	             0ee11323          	sh	x14,230(x2)
     ### map[ 48 ] = 6293 ;              //44 = 20+29
 1e8:	             89578713          	addi	x14,x15,-1899
 1ec:	             0ee11423          	sh	x14,232(x2)
     ### map[ 49 ] = 6501 ;              //49+ 21+20
 1f0:	             96578713          	addi	x14,x15,-1691
 1f4:	             0ee11523          	sh	x14,234(x2)
     ### map[ 50 ] = 6521 ;              //41 = 21+22
 1f8:	             97978713          	addi	x14,x15,-1671
 1fc:	             0ee11623          	sh	x14,236(x2)
     ### map[ 51 ] = 6531 ;              //43 = 21+23
 200:	             98378713          	addi	x14,x15,-1661
 204:	             0ee11723          	sh	x14,238(x2)
     ### map[ 52 ] = 6811 ;              //44 = 22+21
 208:	             a9b78713          	addi	x14,x15,-1381
 20c:	             0ee11823          	sh	x14,240(x2)
     ### map[ 53 ] = 7111 ;              //41 = 23+21
 210:	             bc778713          	addi	x14,x15,-1081
 214:	             0ee11923          	sh	x14,242(x2)
     ### map[ 54 ] = 7401 ;              //44 = 24+20
 218:	             ce978713          	addi	x14,x15,-791
 21c:	             0ee11a23          	sh	x14,244(x2)
     ### map[ 55 ] = 7454 ;              //44 = 24+25
 220:	             d1e78713          	addi	x14,x15,-738
 224:	             0ee11b23          	sh	x14,246(x2)
     ### map[ 56 ] = 7744 ;              //49 = 25+24
 228:	             e4078713          	addi	x14,x15,-448
 22c:	             0ee11c23          	sh	x14,248(x2)
     ### map[ 57 ] = 7764 ;              //49 = 25+26
 230:	             e5478713          	addi	x14,x15,-428
 234:	             0ee11d23          	sh	x14,250(x2)
     ### map[ 58 ] = 8054 ;              //51= 26+25
 238:	             f7678713          	addi	x14,x15,-138
 23c:	             0ee11e23          	sh	x14,252(x2)
     ### map[ 59 ] = 8071 ;              //51 = 26+27
 240:	             f8778713          	addi	x14,x15,-121
 244:	             0ee11f23          	sh	x14,254(x2)
     ### map[ 60 ] = 8083 ;              //53 = 26+28
 248:	             f9378713          	addi	x14,x15,-109
 24c:	             10e11023          	sh	x14,256(x2)
     ### map[ 61 ] = 8361 ;              //54 = 27+26
 250:	             0a978713          	addi	x14,x15,169
 254:	             10e11123          	sh	x14,258(x2)
     ### map[ 62 ] = 8436 ;              //53 = 28+3
 258:	             0f478713          	addi	x14,x15,244
 25c:	             10e11223          	sh	x14,260(x2)
     ### map[ 63 ] = 8663 ;              //31 = 28+26
 260:	             1d778713          	addi	x14,x15,471
 264:	             10e11323          	sh	x14,262(x2)
     ### map[ 64 ] = 8692 ;              //54 = 28+29
 268:	             1f478713          	addi	x14,x15,500
 26c:	             10e11423          	sh	x14,264(x2)
     ### map[ 65 ] = 8711 ;              //57 = 29+1
 270:	             20778713          	addi	x14,x15,519
 274:	             10e11523          	sh	x14,266(x2)
     ### uint8_t temp, tempo;
     ### uint16_t value = 0, value1 = 0;
     ### uint8_t mapped;
     ###     for (int b = 0; b < 30; b++)        //initialize parent & checked array at infi. dist.(relatively large) for all nodes & no node checked
     ###     {
     ###         node_dist[b]= 255;            
 278:	             01e00613          	addi	x12,x0,30
     ### map[ 66 ] = 8903 ;              //57 = 29+20
 27c:	             2c778713          	addi	x14,x15,711
     ###         node_dist[b]= 255;            
 280:	             0ff00593          	addi	x11,x0,255
     ### map[ 67 ] = 8982 ;              //30 = 29+28
 284:	             31678793          	addi	x15,x15,790
     ###         node_dist[b]= 255;            
 288:	             00810513          	addi	x10,x2,8
     ### map[ 66 ] = 8903 ;              //57 = 29+20
 28c:	             10e11623          	sh	x14,268(x2)
     ### map[ 67 ] = 8982 ;              //30 = 29+28
 290:	             10f11723          	sh	x15,270(x2)
     ###         node_dist[b]= 255;            
 294:	             1f4000ef          	jal	x1,488 <memset>
     ###         checked[b]=false;
 298:	             01e00613          	addi	x12,x0,30
 29c:	             00000593          	addi	x11,x0,0
 2a0:	             02810513          	addi	x10,x2,40
 2a4:	             1e4000ef          	jal	x1,488 <memset>
     ###     }
     ###     node_dist[END_POINT]=0;            // set all indexes to start values in node_dist and parent arrays
 2a8:	             02000737          	lui	x14,0x2000
 2ac:	             00474783          	lbu	x15,4(x14) # 2000004 <__bss_end+0x4>
 2b0:	             11010693          	addi	x13,x2,272
     ### int main(int argc, char const *argv[]) {
 2b4:	             00000413          	addi	x8,x0,0
     ###     node_dist[END_POINT]=0;            // set all indexes to start values in node_dist and parent arrays
 2b8:	             0ff7f793          	andi	x15,x15,255
 2bc:	             00f687b3          	add	x15,x13,x15
 2c0:	             ee078c23          	sb	x0,-264(x15)
     ###     parent[END_POINT]=255;
 2c4:	             00474783          	lbu	x15,4(x14)
 2c8:	             fff00713          	addi	x14,x0,-1
 2cc:	             01d00513          	addi	x10,x0,29
 2d0:	             0ff7f793          	andi	x15,x15,255
 2d4:	             00f687b3          	add	x15,x13,x15
 2d8:	             f2e78c23          	sb	x14,-200(x15)
     ###     for (int j = 0; j < 29; j++)        //runs 29 times for 29 relations(30 nodes , 29 relations)
     ###     {
     ###         uint8_t min_val = 255, min_index;
     ###         for (int k = 0; k < 30; k++)
 2dc:	             01e00313          	addi	x6,x0,30
     ###             if(checked[k]==false&&node_dist[k] < min_val){        // checking condition for shortest dist
     ###                 min_val=node_dist[k];
     ###                 min_index=k;
     ###             }
     ###         }
     ###         checked[min_index]=true;
 2e0:	             00100e93          	addi	x29,x0,1
     ###         for (int l = 0; l < 30; l++)
     ###         {
     ###             mapped = 0;
     ###             for (int y = 0; y < 68; y++){
     ###                 if ( map[y] > ((min_index*30 + l) * 10) &&( map[y] - ((min_index*30 + l) * 10) ) > 0 && ( map[y] - ((min_index*30 + l) * 10) ) < 10 ){
 2e4:	             00800f13          	addi	x30,x0,8
     ###         for (int k = 0; k < 30; k++)
 2e8:	/----------> 00000793          	addi	x15,x0,0
     ###         uint8_t min_val = 255, min_index;
 2ec:	|            0ff00713          	addi	x14,x0,255
     ###             if(checked[k]==false&&node_dist[k] < min_val){        // checking condition for shortest dist
 2f0:	|     /----> 02810693          	addi	x13,x2,40
 2f4:	|     |      00f686b3          	add	x13,x13,x15
 2f8:	|     |      0006c683          	lbu	x13,0(x13)
 2fc:	|     |  /-- 00069e63          	bne	x13,x0,318 <t1b_path_planner.c.0240d200+0x156>
 300:	|     |  |   00810693          	addi	x13,x2,8
 304:	|     |  |   00f686b3          	add	x13,x13,x15
 308:	|     |  |   0006c683          	lbu	x13,0(x13)
 30c:	|     |  +-- 00e6f663          	bgeu	x13,x14,318 <t1b_path_planner.c.0240d200+0x156>
     ###                 min_index=k;
 310:	|     |  |   0ff7f413          	andi	x8,x15,255
     ###             if(checked[k]==false&&node_dist[k] < min_val){        // checking condition for shortest dist
 314:	|     |  |   00068713          	addi	x14,x13,0
     ###         for (int k = 0; k < 30; k++)
 318:	|     |  \-> 00178793          	addi	x15,x15,1
 31c:	|     \----- fc679ae3          	bne	x15,x6,2f0 <t1b_path_planner.c.0240d200+0x12e>
     ###         checked[min_index]=true;
 320:	|            11010793          	addi	x15,x2,272
 324:	|            00878e33          	add	x28,x15,x8
 328:	|            00241793          	slli	x15,x8,0x2
 32c:	|            00878733          	add	x14,x15,x8
 330:	|            00471793          	slli	x15,x14,0x4
 334:	|            40e787b3          	sub	x15,x15,x14
 338:	|            f1de0c23          	sb	x29,-232(x28)
     ###         for (int l = 0; l < 30; l++)
 33c:	|            00810593          	addi	x11,x2,8
 340:	|            00279793          	slli	x15,x15,0x2
 344:	|            00000713          	addi	x14,x0,0
     ###             for (int y = 0; y < 68; y++){
 348:	|  /-------> 0ff7ff93          	andi	x31,x15,255
 34c:	|  |         08810613          	addi	x12,x2,136
     ###             mapped = 0;
 350:	|  |         00000813          	addi	x16,x0,0
     ###                 if ( map[y] > ((min_index*30 + l) * 10) &&( map[y] - ((min_index*30 + l) * 10) ) > 0 && ( map[y] - ((min_index*30 + l) * 10) ) < 10 ){
 354:	|  |  /----> 00065683          	lhu	x13,0(x12)
 358:	|  |  |  /-- 00d7dc63          	bge	x15,x13,370 <t1b_path_planner.c.0240d200+0x1ae>
 35c:	|  |  |  |   40f688b3          	sub	x17,x13,x15
 360:	|  |  |  |   fff88893          	addi	x17,x17,-1
 364:	|  |  |  +-- 011f6663          	bltu	x30,x17,370 <t1b_path_planner.c.0240d200+0x1ae>
     ###                     mapped = map[y] - ((min_index*30 + l) * 10);
 368:	|  |  |  |   41f686b3          	sub	x13,x13,x31
 36c:	|  |  |  |   0ff6f813          	andi	x16,x13,255
     ###             for (int y = 0; y < 68; y++){
 370:	|  |  |  \-> 00260613          	addi	x12,x12,2
 374:	|  |  |      11010693          	addi	x13,x2,272
 378:	|  |  \----- fcd61ee3          	bne	x12,x13,354 <t1b_path_planner.c.0240d200+0x192>
     ###                 }
     ###             }
     ###             if(!checked[l]&&mapped&&node_dist[min_index]+mapped<node_dist[l]){
 37c:	|  |         02810693          	addi	x13,x2,40
 380:	|  |         00e686b3          	add	x13,x13,x14
 384:	|  |         0006c683          	lbu	x13,0(x13)
 388:	|  |     /-- 02069463          	bne	x13,x0,3b0 <t1b_path_planner.c.0240d200+0x1ee>
 38c:	|  |     +-- 02080263          	beq	x16,x0,3b0 <t1b_path_planner.c.0240d200+0x1ee>
 390:	|  |     |   ef8e4683          	lbu	x13,-264(x28)
 394:	|  |     |   0005c603          	lbu	x12,0(x11)
 398:	|  |     |   010686b3          	add	x13,x13,x16
 39c:	|  |     +-- 00c6da63          	bge	x13,x12,3b0 <t1b_path_planner.c.0240d200+0x1ee>
     ###                 parent[l]=min_index;
 3a0:	|  |     |   04810613          	addi	x12,x2,72
 3a4:	|  |     |   00e60633          	add	x12,x12,x14
 3a8:	|  |     |   00860023          	sb	x8,0(x12)
     ###                 node_dist[l]=node_dist[min_index]+mapped;
 3ac:	|  |     |   00d58023          	sb	x13,0(x11)
     ###         for (int l = 0; l < 30; l++)
 3b0:	|  |     \-> 00170713          	addi	x14,x14,1
 3b4:	|  |         00158593          	addi	x11,x11,1
 3b8:	|  |         00a78793          	addi	x15,x15,10
 3bc:	|  \-------- f86716e3          	bne	x14,x6,348 <t1b_path_planner.c.0240d200+0x186>
     ###     for (int j = 0; j < 29; j++)        //runs 29 times for 29 relations(30 nodes , 29 relations)
 3c0:	|            fff50513          	addi	x10,x10,-1
 3c4:	\----------- f20512e3          	bne	x10,x0,2e8 <t1b_path_planner.c.0240d200+0x126>
     ###             }
     ###         }
     ###     }
     ###     temp=START_POINT;
 3c8:	             020007b7          	lui	x15,0x2000
 3cc:	             0007c703          	lbu	x14,0(x15) # 2000000 <__bss_end>
     ###    
     ###     for(int z=0;z<30;z++){                        // loop to print planned path
     ###         if(parent[temp]==255)
 3d0:	             0ff00813          	addi	x16,x0,255
     ###     for(int z=0;z<30;z++){                        // loop to print planned path
 3d4:	             00000793          	addi	x15,x0,0
     ###     temp=START_POINT;
 3d8:	             0ff77713          	andi	x14,x14,255
     ###     for(int z=0;z<30;z++){                        // loop to print planned path
 3dc:	             01e00513          	addi	x10,x0,30
     ###         if(parent[temp]==255)
 3e0:	/----------> 00070693          	addi	x13,x14,0
 3e4:	|            11010713          	addi	x14,x2,272
 3e8:	|            00d70733          	add	x14,x14,x13
 3ec:	|            f3874703          	lbu	x14,-200(x14)
 3f0:	|            00178613          	addi	x12,x15,1
 3f4:	|            0ff67593          	andi	x11,x12,255
 3f8:	|     /----- 05071663          	bne	x14,x16,444 <t1b_path_planner.c.0240d200+0x282>
     ###         { path_planned[z]=(temp);
 3fc:	|     |      11010713          	addi	x14,x2,272
 400:	|     |      00f707b3          	add	x15,x14,x15
 404:	|     |      f4d78c23          	sb	x13,-168(x15)
     ### 
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 408:	|  /--|----> 00000793          	addi	x15,x0,0
     ###     _put_value(path_planned[i]);
     ###         NODE_POINT = path_planned[i];
 40c:	|  |  |      02000737          	lui	x14,0x2000
     ###     _put_value(path_planned[i]);
 410:	|  |  |  /-> 06810693          	addi	x13,x2,104
 414:	|  |  |  |   00f686b3          	add	x13,x13,x15
 418:	|  |  |  |   0006c683          	lbu	x13,0(x13)
     ###     for (int i = 0; i < idx; ++i) {
 41c:	|  |  |  |   00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 420:	|  |  |  |   00d70423          	sb	x13,8(x14) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i) {
 424:	|  |  |  \-- feb7c6e3          	blt	x15,x11,410 <t1b_path_planner.c.0240d200+0x24e>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 428:	|  |  |      00100793          	addi	x15,x0,1
 42c:	|  |  |      00f70623          	sb	x15,12(x14)
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 430:	|  |  |      11c12083          	lw	x1,284(x2)
 434:	|  |  |      11812403          	lw	x8,280(x2)
 438:	|  |  |      00000513          	addi	x10,x0,0
 43c:	|  |  |      12010113          	addi	x2,x2,288
 440:	|  |  |      00008067          	jalr	x0,0(x1)
     ###         path_planned[z]=(temp);
 444:	|  |  \----> 06810893          	addi	x17,x2,104
 448:	|  |         00f887b3          	add	x15,x17,x15
 44c:	|  |         00d78023          	sb	x13,0(x15)
     ###     for(int z=0;z<30;z++){                        // loop to print planned path
 450:	|  |         00060793          	addi	x15,x12,0
 454:	\--|-------- f8a616e3          	bne	x12,x10,3e0 <t1b_path_planner.c.0240d200+0x21e>
 458:	   \-------- fb1ff06f          	jal	x0,408 <t1b_path_planner.c.0240d200+0x246>

0000045c <_set_tls>:
 45c:	00050213          	addi	x4,x10,0
 460:	00008067          	jalr	x0,0(x1)

00000464 <memcpy>:
 464:	       00050313          	addi	x6,x10,0
 468:	/----- 00060e63          	beq	x12,x0,484 <memcpy+0x20>
 46c:	|  /-> 00058383          	lb	x7,0(x11)
 470:	|  |   00730023          	sb	x7,0(x6)
 474:	|  |   fff60613          	addi	x12,x12,-1
 478:	|  |   00130313          	addi	x6,x6,1
 47c:	|  |   00158593          	addi	x11,x11,1
 480:	|  \-- fe0616e3          	bne	x12,x0,46c <memcpy+0x8>
 484:	\----> 00008067          	jalr	x0,0(x1)

00000488 <memset>:
 488:	       00050313          	addi	x6,x10,0
 48c:	/----- 00060a63          	beq	x12,x0,4a0 <memset+0x18>
 490:	|  /-> 00b30023          	sb	x11,0(x6)
 494:	|  |   fff60613          	addi	x12,x12,-1
 498:	|  |   00130313          	addi	x6,x6,1
 49c:	|  \-- fe061ae3          	bne	x12,x0,490 <memset+0x8>
 4a0:	\----> 00008067          	jalr	x0,0(x1)

000004a4 <__text_end>:
 4a4:	0000                	c.unimp
	...
